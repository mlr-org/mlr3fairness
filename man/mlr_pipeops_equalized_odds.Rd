% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpEOd.R
\name{mlr_pipeops_equalized_odds}
\alias{mlr_pipeops_equalized_odds}
\alias{PipeOpEOd}
\title{Equalized Odds Debiasing}
\format{
\link{R6Class} object inheriting from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}
\description{
Fairness post-processing method to achieve equalized odds fairness.
Works by randomly flipping a subset of predictions with pre-computed
probabilities in order to satisfy equalized odds constraints.\cr
NOTE: Carefully assess the correct privileged group.
}
\section{Construction}{
\preformatted{PipeOpEOd*$new(id = "eod", param_vals = list())
}
\itemize{
\item \code{id} (\verb{character(1))}.
\item \code{param_vals} (\code{list()})
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \link{PipeOpTaskPreproc}. Instead of a \code{\link[mlr3:Task]{Task}}, a
\link[mlr3:TaskClassif]{TaskClassif} is used as input and output during training and prediction.

The output during training is the input \link[mlr3:Task]{Task}. The output during prediction is
a \link[mlr3:PredictionClassif]{PredictionClassif} with partially flipped predictions.
}

\section{State}{

The \verb{$state} is a named \code{list} with the \verb{$state} elements inherited from \link{PipeOpTaskPreproc}.
}

\section{Parameters}{

\itemize{
\item \code{alpha} (\code{numeric()}): A number between 0 (no debiasing) and 1 (full debiasing).
Controls the debiasing strength by multiplying the flipping probabilities with alpha.
\item \code{privileged} (\code{character()}): The privileged group.
}
}

\section{Fields}{

Only fields inherited from \link{PipeOpTaskPreproc}/\code{\link{PipeOp}}.
}

\section{Methods}{

Methods inherited from \link{PipeOpTaskPreproc}/\link{PipeOp}.
}

\examples{
library(mlr3pipelines)

eod = po("EOd")
learner_po = po("learner_cv",
  learner = lrn("classif.rpart"),
  resampling.method = "insample"
)

task = tsk("compas")
graph = learner_po \%>>\% eod
glrn = GraphLearner$new(graph)
glrn$train(task)

# On a Task
glrn$predict(task)

# On newdata
glrn$predict_newdata(task$data(cols = task$feature_names))
}
\references{
Hardt M, Price E, Srebro N (2016).
\dQuote{Equality of Opportunity in Supervised Learning.}
In \emph{Advances in Neural Information Processing Systems}, volume 29, 3315--3323.
\url{https://papers.nips.cc/paper/2016/file/9d2682367c3935defcb1f9e247a97c0d-Paper.pdf}.

Pleiss, Geoff, Raghavan, Manish, Wu, Felix, Kleinberg, Jon, Weinberger, Q K (2017).
\dQuote{On Fairness and Calibration.}
In Guyon I, Luxburg UV, Bengio S, Wallach H, Fergus R, Vishwanathan S, Garnett R (eds.), \emph{Advances in Neural Information Processing Systems}, volume 30.
\url{https://proceedings.neurips.cc/paper/2017/file/b8b9c74ac526fffbeb2d39ab038d1cd7-Paper.pdf}.
}
\seealso{
https://mlr3book.mlr-org.com/list-pipeops.html

Other PipeOps: 
\code{\link{mlr_pipeops_explicit_pta}},
\code{\link{mlr_pipeops_reweighing}}
}
\concept{PipeOps}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpEOd}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{PipeOpEOd$new()}}
\item \href{#method-clone}{\code{PipeOpEOd$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help">}\href{../../mlr3pipelines/html/PipeOp.html#method-help}{\code{mlr3pipelines::PipeOp$help()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict">}\href{../../mlr3pipelines/html/PipeOp.html#method-predict}{\code{mlr3pipelines::PipeOp$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print">}\href{../../mlr3pipelines/html/PipeOp.html#method-print}{\code{mlr3pipelines::PipeOp$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train">}\href{../../mlr3pipelines/html/PipeOp.html#method-train}{\code{mlr3pipelines::PipeOp$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this [R6][R6::R6Class][PipeOp] R6 class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpEOd$new(id = "EOd", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{\code{character} \cr
The PipeOps identifier in the PipeOps library.}

\item{\code{param_vals}}{\code{list} \cr
The parameter values to be set. See \code{Parameters}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpEOd$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
